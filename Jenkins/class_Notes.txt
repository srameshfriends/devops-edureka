			
				
***********************
Day 7 - 19th Sep. 2023 
***********************		
	
		Handling Remote Repositories using GITHUB :::
		
		echo "rec1" >> file1.txt 
		
		git add .
		
		git stash save "file1.txt"
		
		git stash branch "<temp_branch1>"
		
		Handling Remote Repositories using GITHUB :::
		
		
		Developers' Workload :
		
			Enhancement Project/Bug fix 		## Remote Repository already exist with project docs 
			
			New Project 						## Empty Remote Repository exist. Project docs should be loaded from local.
		
		
		
			Enhancement Project/Bug fix 		## Remote Repository already exist with project docs 

				testrepo1
				
				git clone - 
			
				clone url --> 
				
				syntax : git clone https://github.com/EDU-Sep11/edu-testrepo1.git
				
				Access to github ::
				
					username & password.
					
					username & access token. 
					
				git clone 
				
				git remote -v 
				
				git fetch/pull - handle incremental changes! 
					push 	==>	It is used to add the changes from Local Repository to Remote Repository.
					
					fetch/pull	==> Both are used to handle the incremental changes
					
							fetch :
								==> It is just used to check if there is any changes available in remote repository.
									If there is any changes available, the changes will be updated in the local repository. It will never gets updated in the working directory.
								
							pull :
								==> It is used to check if there is any changes available in remote repository and if there is any changes available, the changes will be updated in the local repository as well as in the working directory.	
								pull = fetch + merge 					
					
				
				pull == rebase 
				
				git remote -v
				
				git remote add origin https://github.com/EDU-Sep11/edu-testrepo1.git
				
				git remote remove origin
				
				git push -u origin 					# Changes will be push to default branch in remote repo.
				
				git push -u origin feature1
				
				
				For New Project Repository :
				
				git init
				echo "rec1" >> f1.txt 
				git add . 
				git commit -m "asdf"
				
				git remote add origin https://github.com/EDU-Sep11/edu-testrepo1.git
				
				git push -u origin master 
				
				
				git remote add origin2 https://github.com/EDU-Sep11/edu-testrepo1.git
				
			
		
  501  cd e:
  502  cd edu-Sep11/
  503  clear
  504  ls
  505  clear
  506  mkdir myremoterepos
  507  cd myremoterepos/
  508  ls
  509  git clone https://github.com/EDU-Sep11/edu-testrepo1.git
  510  ls
  511  cd edu-testrepo1/
  512  clear
  513  ls
  514  git remote -v
  515  git status
  516  git log --oneline
  517  git switch -c localfeature1
  518  ls
  519  echo "rec1" >> localfile1.txt
  520  git add .
  521  git commit -m "created localfile1.txt"
  522  git push -u origin localfeature1
  523  git switch main
  524  celar
  525  clear
  526  git status
  527  ls
  528  ls
  529  git status
  530  git remote -v
  531  git fetch
  532  ls
  533  git fetch
  534  git ls-files
  535  clear
  536  git status
  537  git pull
  538  ls
  539  git branch
  540  clear
  541  git pull
  542  ls
  543  clear
  544  git remote -v
  545  git remote remote origin
  546  clear
  547  clear
  548  git remote -v
  549  git remote remove origin
  550  git remote -v
  551  git remote add origin https://github.com/EDU-Sep11/edu-testrepo1.git
  552  git remote -v
  553  cd ..
  554  mkdir remoterepo1
  555  cd remoterepo1/
  556  clear
  557  git init
  558  echo "rec1" >> file1.txt
  559  git add .
  560  git commit -m "created file1.txt"
  561  git log --oneline
  562  git remote -v
  563  git remote add origin https://github.com/EDU-Sep11/testrepo2.git
  564  git remote -v
  565  git branch -M main
  566  git branch -M master
  567  git push -u origin master
  568  git remote -v
  569  git remote add origin2 https://github.com/EDU-Sep11/edu-testrepo1.git
  570  git remote -v
  571  cd ..
  572  history
			
			
			master     s1.txt (re1)
			
									re1,re2
									# conflict
			
			feature1
						re1,re2
						
				git switch master 
				
				git merge feature1
						
			feature2    re1,record2		

					git rebase master  # conflict
					
				git switch master 
				
				git merge feature2				
				
		
		Build Orchestration Tool  : Jenkins
		
		Build : Is a process of compiling src code & Create artifacts.
		
		Environment
		
		DEV : 
		
		
		Jenkins Architecture ::: is a Build Orchestration Tool 
			Master/Slave Architecture:
			
			Continous Development 		--> Improve the productivity of Developers
			
					Coding ==>
						Introduce the IDEs - (Integrated Development Environment) Eclipse based IDEs, Eclipse, Visual Studio Code, Pycharm, to develop the code.
					Build ==> 
						It is a process of compiling the source code and create artifacts(Binaries - *.war / *.jar /*.exec / *.dll
					Unit Testing by developers					
					Promote to higher envrionment for further Testing
					Notify the Testing team thru Emails...
					
					DevOps Tools ::: GIT, Jenkins, Build tools Maven,Gradle, JUnit/TestNG, Ansible,Docker 
					
			
			Continous Integration 
					==> How frequently we can integrate the code for further testing without creating any impact
						Promote to higher envrionment for further Testing
						DevOps Tools ::: Jenkins, Ansible, Docker
					
			
			
			Master/Slave Architecture:		Load Balancing.

				Jenkins_Master 		(VM)		---> It is used to create Jenkins Jobs/Project and Schedule to slave Nodes.
					Slave_Nodes(VM)				---> Used to perform the actual build and create artifacts.
						Jenkins_Slave1  (VM)	Java appln. 	-- jdk, git, mavan/gradle	
						Jenkins_Slave2  (VM)    Python appln.	-- git, python 
						
			About the Roles & Responsibilites :::
			
			
			Developers Perspective:
				Developers are just the consumers of Jenkins.		
			
			
			DevOps Perspective:
				Jenkins_Administrators
				
					Installation of Jenkins
					Plugins Management
					Upgrade
					User Management
					Credential Management 
					Tools Mangements
					Slave_Nodes Management 
					Security Management
					Onboard Applications to Jenkins 
					Jenkins Jobs/Project/Pipeline Creation and management 
						Create CI/CD Pipeline for automated build & Deployment
					Troubleshooting
					Backup and Recovery 
					
					
			Installation of Jenkins	::
			
				1. AWS free tier Account :
						- valid email_id & Mobile Number
						- credit/debit card - International transaction
						
				2. Access AWS Console.
						using root user ID - email id, 
				
				3. Create AWS EC2 Instance -- Ubuntu Machines.
				4. Connect to EC2 Instance
						- EC2 Instance Connect
						- SSH Agents 
								putty
								mobaXterm		https://mobaxterm.mobatek.net/download.html
						- Terminals
				
				
***********************
Day 8 - 20th Sep. 2023 
***********************

						
		Installation of Jenkins 	


				In AWS  - Virtual Machines are called as EC2 Instances
				
					VM --> AMI --> Instance Type --> Access Key
					
					
				1VM - 750 hrs/month
				
				10VMs - 75 hrs/month


				Linux Distributions :::
				
				 Unix 
				  Linux centos RHEL Debian Ubuntu Amazon Linux
				  
				  
		
		Install Jenkins :::			https://www.jenkins.io/doc/book/installing/
		
				1. Pre-requisites 
				2. Actual Installation of Tools 
				3. Post Installation.
					
					
				Linux Package :::
				
					It is used to manage the packages ::
					
						centos/rhel/amazonlinux(previous version) 	==> yum package manager 
						ubuntu 										==> apt package manager
						
				Jenkins run as a service and it runs in default - port 8080 
				
				<public_ipaddress>:8080
				
				http://65.0.131.45:8080/

#Install Java :
					
sudo -i

sudo apt update
sudo apt install openjdk-17-jre
java -version				
			

Install Jenkins :			

curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins	



systemctl status jenkins 
systemctl restart jenkins 
systemctl start jenkins 
systemctl stop jenkins 				
					

					
					
Next :		
			Jenkins Projects :
			
				Freestyle projects 		# done thru manual configurations
				
				pipeline projects 		# done thru automated scripts - groovy
					Onboard Applications to Jenkins 
					Jenkins Jobs/Project/Pipeline Creation and management 
						Create CI/CD Pipeline for automated build & Deployment
						
				Slave Node Configuration
				
***********************
Day 9 - 21st Sep. 2023 
***********************

			Jenkins Projects :
			
				Freestyle projects 		# done thru manual configurations
				
				pipeline projects 		# done thru automated scripts - groovy
					Onboard Applications to Jenkins 
					Jenkins Jobs/Project/Pipeline Creation and management 
						Create CI/CD Pipeline for automated build & Deployment
						
				Slave Node Configuration
				
				Use Cases :
				
					Automated build and deployments 
					Automate the Testing 
					Automate the Monitoring and Alerts 
					Automate the Backup process 
					Automate the volume management.
					Automate the start and stop of various environments/servers - thru scheduling....
					CLI --> awscli, azcli
					
				
				Environments :
				
				DEV
				QA 
				
				UAT 
					
					
				PROD 
				
				Non-Prod  & Prod 
					
				
					
				Freestyle projects 		# done thru manual configurations
				
					Create  and configure.
					Build Steps
					
					Variables :
						Environment Variables
						User-Defined Variables
					
					Execute and Check the status/console
					
					
					scmcheckout - build - create artifacts - deploy&test in qa - deploy&test in uat - deploy to prod 

					scmcheckout - build - create artifacts - deploy&test in qa - deploy&test in uat - Prod_Approval - deploy to prod
					
					
				
				Pipeline Projects ==>	 Groovy Scripts :::
				
					Scripted Pipeline 
					
					Declarative Pipeline
					
pipeline {
    agent any

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Build') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Deploy to QA Server') {
            steps {
                echo 'Hello World'
            }
        }
    }
}					
					
			 

			CI/CD Pipeline Project ::::
			
				scmcheckout - build - create artifacts - deploy&test in qa
				
				
			
			Jenkins_Master :	--> jdk, jenkins 
			
				Jenkins_Slave1 : --> git, jdk, maven 
				
			QA_Server:			--> jdk, tomcat
			
			
			Maven Build Tool ::
			
				Compile and create artifacts 
				Maven Goals & pom.xml(It is used to maintain the dependencies & plugins required to build the application)
				
				
			The Slave - Node Creation.
			
			
			Jenkins_Master :	--> jdk, jenkins 				VM 
				Jenkins_Slave1 : --> git, jdk, maven 			VM
			
			
			1. Install the required tools in slave node 
			2. Create the a user in slave node 
			3. Create Authentication method.
					SSH Key based authtication.
					
				Authentication methods :
					Key based Auth.			
						public key 
						private key
					Token based Auth.
					Password based Auth.
					Passwordless Auth.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##To Configure Jenkins Msster :::
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Install Java :
					
sudo -i

sudo apt update
sudo apt install openjdk-17-jre
java -version				
			

Install Jenkins :			

curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins	



systemctl status jenkins 
systemctl restart jenkins 
systemctl start jenkins 
systemctl stop jenkins 	

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###Configure Slave Node1 for Java Maven App. :
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

###Install Java ::

sudo -i 
sudo apt update -y 
sudo apt install openjdk-11-jre -y
java -version

###Install GIT :

sudo apt install git -y

##Install Maven - Build Tool :
### https://maven.apache.org/install.html

sudo apt install maven -y 


###Create User in Jenkins Slave Machine & Create SSH Keys 

##	SSH Keys --> is composed of public and private keys 


#Add User : 

#useradd -m -d /home/devopsadmin devopsadmin
#useradd devopsadmin

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
ssh-keygen -t rsa -b 4096 -m PEM


ls ~/.ssh 

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public


cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh


##In Jenkins Master - Add Node Configuration
		
###		Goto Manage Jenkins - Add New Node Configuration
		
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
        }
        stage('Build') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Deploy to QA Server') {
            steps {
                echo 'Hello World'
            }
        }
    }
}
Next ::

		Build 
		Deployment 
		Build Triggers




***********************
Day 10 - 22nd Sep. 2023 
***********************				

		Build 
		Deployment 
		Build Triggers
		
		
		Maven Build Stages :

			pom.xml 
			Goals 
				clean
				test
				build 
				package	=> unit test + build 
				
			Test Folder with the Test Scenarios
			
			Tools Configuration in Jenkins_Master :
			
			Tools & Plugins :::: 
			
pipeline {
    agent { label 'slave1' }
	
	tools {
        maven "maven-3.6.3"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
				
            }
        }
        stage('Build') {
            steps {
                echo 'Perform Application Build'
				sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }
        stage('Deploy to QA Server') {
            steps {
				script {
					sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
				}
            }
        }
    }
}





Deploy to Target Servers ::::


	Servers :::
	
		DEV 
		
		TEST 
		
		
		Hosted Servers/Target Servers/Prod Server  (VM) - Hardware
		
			Application Server (Software) - Tomcat/Nginx
			
			Tomcat - Default runs in port 8080
			
			jdk, 
			Tomcat 
			Start Tomcat Server
			
			COnnect the Tomcat_Server to Jenkins Master 
			
			Create User 
			Create Auth. - sshkey
			
			
		Deployment ::: ????
		
		
		Copying the artifacts from one server to another 
		
			Source_Server : Slave1 										Artifactory												Target_Server : Tomcat 
			
				target/mvn-hello-world.war						===> 	mvn-hello-world.war_SNAPSHOT_V1.0		===>					/opt/tomcat/webapps 

			
			
			Server :::
			
				Project1_Artifacts
					Release1_Artifacts
						mvn-hello-world.war_SNAPSHOT_V1.0	
						mvn-hello-world.war_SNAPSHOT_V1.1					PROD 
			
		Connect the Tomcat_Server to Jenkins :::
		
		In Jenkins_Master :: Install a plugin - Publish over ssh plugin.
		
				Archieve :::: Version Control the Artifacts :::
				
				Artifactory Repository - JFrog / Az Artifact
				
				mvn-hello-world.war_SNAPSHOT_V1.0
				mvn-hello-world.war_SNAPSHOT_V1.1
				
				
				
		Environments ::
		
			DEV 
			 Build & Create artifacts ==> Archieve it
			 
			QA 
			UAT 
			PROD 
			 

		Build Triggers :::
		
			- Build Periodic 		-- Crontab :
			
			Non-Prod Servers 												Prod Servers/Prod
			
			DEV 
			QA 
			UAT 
			
			8AM Start all the non-prod servers 
			10PM stop all the non-prod servers 
			
			- Github Webhook
			
			- Poll SCM 
			

***********************
Day 11 - 25th Sep. 2023 
***********************			
		
		Build Triggers :::
		
			- Build Periodic 		-- Crontab :
					==> Used to trigger the jenkins job based upon the schedule
			
			Non-Prod Servers 												Prod Servers/Prod
			
			DEV 
			QA 
			UAT 
			
			8AM Start all the non-prod servers 
			10PM stop all the non-prod servers 
			
			- Github Webhook
					==> Used to trigger the jenkins job as soon the src_code repo is pushed with any new changes.
						Create a github Webhook configuration in src_code repository using jenkins payload url.
						http://13.235.86.157:8080/github-webhook/
						
						
			
			- Poll SCM 
					==> Used to trigger the jenkins job based upon the schedule if there is any changes happened in src_code repo.
					
				Test_Cycles :::
				
					Test_Jobs 
						8AM -- Test job
						12noon --> test job1
						4 pm
			
Summary :::
		Jenkins_Architecture 
		Node config. 
		Jenkins Administration 
		CICD
		Automated triggers				
